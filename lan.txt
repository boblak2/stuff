gradle


1) Project Level

build.gradle

buildscript{
	repositories {
		google()
		jcenter()
	}
	dependencies{
		classpath 'com.android.tools.build:gradle:3.0.0'
	}
}

allprojects {
	repositories{
		google()
		jcenter()
		mavenCentral()
		maven { url "http://dkeode" }
	}
}


2) Modul level

apply plugin 'com.android.application' //for all android application
apply plugin 'com.android.library' //for library


android {
	compileSdkVersion 27 //ne mores uporabiti fetures visje od te
	buildToolsVersion "26.0.2" verzija compilerja (optional)
	defaultConfigs {
		applicationId "si.mil.pero"
		minSdkVersion 21
		targetSdkVersion 27 max api level za katero si stestiral aplikacijo
	}
}

dependencies {
	implementation fileTree(dir: 'libs', include ['*.jar'])
	implementation 'com.android.support:appcompat-v7'
}


3) settings.gradle // tukaj doda≈° vse module

include ':app'

------------------------------------
gradlew //shell skripta - wrepper

gradle.settings //where it looks what to build

gradlew build
gradlew clean build


gradlew clean //cleans build folder

gradlew test //run tests


gradlew assamble

app/build/output/apk

gradlew lint
app/build/reports


---------
own file:

burek.gradle

ext{
	minSdkVersion 44
}

apply from: 'burek.gradle' //v project.gradle

rootProject.minSdkVersion
oz
"$rootProject.minSdkVersion" //znotraj string se uporabi $


---------------
Add task

task addDate() {
	...
}

gradle.taskGraph.whenReady {
	addDate
}

DEX files (Dalvik executables)
--------------------

settings.gradle

pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
    includeBuild("../neki")
}

dependencyResolutionManagement {
	repositories {
        google()
        mavenCentral()
    }
    includeBuild("../neki")
}

rootProject="nameOfproject"

include ':app'
include ':mylibrary'


-----------------------------------
jitpack.io //for publishing library

1) upload to githib

2) go to jitpack and past url of git repo

3) that is that



-------------------------------------------
JNI - Java native Interface
-------------------------------------------

*.so - shared lib
*.a  - static lib
JNI - interface where Java and C/C++ can talk to one another.
ABI - application Binary Interface (armv7, ...)
Android.mk - file describing the native library, including name, flags, linked libraries, and source files
Application.mk - 



jni
- Android.mk
- Application.mk
- keys.c


-----------
Android.mk:
LOCAL_PATH := $(call my-dir)

include $(CLEAR_VARS)

LOCAL_MODULE    := keys
LOCAL_SRC_FILES := keys.c

include $(BUILD_SHARED_LIBRARY)

---------
Application.mk
APP_ABI := all

-------------
MainActivity.java

static {
    System.loadLibrary("keys");
}


----------
Gradle

android {
    .....
    buildTypes {
        .....
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}
--
or
--

./ndk-buils
/Users/blazoblak/Library/Android/sdk/ndk/27.0.12077973

./ndk-build -C /Users/blazoblak/Documents/work/SomeArrMaker/app/src/main/jni
//Creates folder libs where you rename it to:
"jniLibs"


-------------------------------------------
-------------------------------------------
dotnet

dotnet new sln

dotnet new classlib

dotnet sln add PrimeService/PrimeService.csproj

mkdir PrimeService.Tests && cd PrimeService.Tests //make new dir and move to it
dotnet new nunit // add unittest

dotnet add reference ../PrimeService/PrimeService.csproj

dotnet sln add ./PrimeService.Tests/PrimeService.Tests.csproj


-------------------------------------------
C#
-------------------------------------------

https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator

private async Task GetData(){ //Task == void
	
}

---------------
Operator ??=

// if a is null then assign 0 to a and add a to the list
numbers.Add(a ??= 0);







