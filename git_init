git init
-Ustvari repozitorij (doda .git folder z metadata)

-Moraš biti v pravem dirictoriju



git init <directory>
git init --bare <directory>
git init --bare my-project.git

-Create an empty Git repository in the specified directory.
TO VELJA ZA MAIN REPOSITORIJ IN NE ZA DEV REPOZITORIJ


git clone <repo>
-The git clone command copies an existing Git repository.
-git clone tudi naredi povezavo na izvorni dirictorij, da lahko 
comitaš nazaj na glavni repo.


Sodelovanje:
git ima repo2repo sedelovanje med repo-ti. Uporablja se PUSH, PULL


------------- git config
- git config command lets you configure your Git installation
example: git config user.name <name>

git config --list

# Tell Git who you are
git config --global user.name "John Smith"
git config --global user.email john@example.com

# Select your favorite text editor
git config --global core.editor vim

# Add some SVN-like aliases
git config --global alias.st status
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.up rebase
git config --global alias.ci commit


------------------------------------------------------------
Saving changes:

-------
git add
git commit
STA GLAVNA UKAZA ZA DELO  Z GIT-OM
-------
git add - doda file/dirictorij v "staging area", dokler ne kličes git commit ni nič
git add <file>
git add <directory>

git add -p

"edit/stage/commit" pattern.


-To uprabiš na začetku ko kreiraš projekt in daš celoten projekt notri.
git add .
git commit


-Dodaš neko specifičen file notri.
git add hello.py
git commit


"The Staging Area" 
-It helps to think of it as a buffer between the working directory and the project history.
-Git doesn’t differentiate between staging changes in new files vs. changes in files that have already been added to the repository.



------- Commit -------

git commit
-commits the staged snapshot to the project history.

-Snapshots are committed to the local repository, and this requires absolutely no interaction with other Git repositories.


git commit -m "<message>"
git commit -a


----Log -------
git log

git status

-List which files are staged, unstaged, and untracked.

---------- .gitignore file 
*.pyc



------------git diff

-----------------------------------
Inspecting a repository

git status
-List which files are staged, unstaged, and untracked.

-The git status command displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven’t, and which files aren’t being tracked by Git. Status output does not show you any information regarding the committed project history. For this, you need to use git log

Ignoring Files
-Za binarne datoteke

-.gitignore folder

*.pyc



git log
-The git log command displays committed snapshots. It lets you list the project history, filter it, and search for specific changes. While git status lets you inspect the working directory and the staging area, git log only operates on the committed history.

git log
git log -n <limit>
git log --oneline
git log --stat
git log <file>



-------------------
git checkout
The git checkout command serves three distinct functions: 

- checking out files, 

- checking out commits, 

- and checking out branches. 


git revert <commit>



-------------------------------------------------------
git remote
-The git remote command lets you create, view, and delete connections to other repositories.

-The git remote command is really just an easier way to pass URLs to these “sharing” commands.

git remote -v
Same as the above command, but include the URL of each connection.

Repository URLs:

1) http://host/path/to/repo.git
Read only

2) ssh://user@host/path/to/repo.git
Read write

---------------------------------
git fetch

The git fetch command imports commits from a remote repository into your local repo.

The resulting commits are stored as remote branches instead of the normal local branches that we’ve been working with. This gives you a chance to review changes before integrating them into your copy of the project.

git fetch <remote>
git fetch <remote> <branch>

Remote Branches
Remote branches are just like local branches, except they represent commits from somebody else’s repository.


So, unlike SVN, synchronizing your local repository with a remote repository is actually a two-step process: fetch, then merge. The git pull command is a convenient shortcut for this process.



--------------------------------------------
git pull
Merging upstream changes into your local repository is a common task in Git-based collaboration workflows. We already know how to do this with git fetch followed by git merge, but git pull rolls this into a single command.

git pull <remote>

---------------------------------------------
git push
Pushing is how you transfer commits from your local repository to a remote repo. It's the counterpart to git fetch, but whereas fetching imports commits to local branches, pushing exports commits to remote branches. This has the potential to overwrite changes, so you need to be careful how you use it. These issues are discussed below.



Iz repota vrne fajl
git checkout -- index.html


tree-ish


create a new repository on the command line
echo "# my_tutorial" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/boblak2/my_tutorial.git
git push -u origin master


or push an existing repository from the command line
git remote add origin https://github.com/boblak2/my_tutorial.git
git push -u origin master


set remote
git remote set-url origin git@gl.digied.si:blaz/moj_telekom_android.git
git remote -v

-----------------------------------------------------------------------------------------------
git stash //stashes working and index
git stash pop //
git stash applay // does not remove from stash

git stash -u //adds untracked files(not added yet)

git stash
git stash
git stash

git stash list 
git stash applay stash@{2}

git stash clear

git stash show

git stash -m "nameOfStash"

git stash pop --index 1
git stash pop 1 // 1- index

-----------------------------------------------------------------------------------------------
git revert //FOR REMOTE branches

- It does not delete the commit instead makes a new commit that contains the removed changes from the commit.

-When it points to a branch, Git doesn't complain, but when you check out a commit, 
it switches into a "detached HEAD" state.

- When use checkout commit you are not on any branch.

git revert HEAD
git revert 162ab5b

-----------------------------------------------------------------------------------------------
git checkout
HEAD to point to either the specified branch or commit.



----------------------
Decorate
A dog
git log --all --decorate --oneline --graph


----------------------
.gitignore

test.py
*.py
img/  //for images

-----------------------------------------------------------------------------------------------
GITLAB youtube tutorila
https://www.youtube.com/watch?v=QCZl0eNzMTs&list=PLLnpHn493BHGgDmJGfCzRYRkFYWcRrxDT&index=2

https://gl.digied.si/blaz/

------------------------------------------------------------------------------------------------------------
------------------------------------ L I  N U X --------------------------------------------------------------
https://ryanstutorials.net/linuxtutorial
------------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=EKmLXiA4zaQ&index=11&list=PL6gx4Cwl9DGCkg2uj3PxUWhMDuTw3VKjM
https://www.youtube.com/watch?v=BtSQIxDPnLc&list=PL6gx4Cwl9DGCkg2uj3PxUWhMDuTw3VKjM&index=18


top
    View real-time data about processes running on the system.
ps
    Get a listing of processes running on the system.
kill
    End the running of a process.
jobs
    Display a list of current jobs running in the background.
fg
    Move a background process into the foreground.
ctrl + z
    Pause the current foreground process and move it into the background.


-------------------------
POSIX
The Portable Operating System Interface (POSIX) // zbirka standardov, da so OS-i lahko kompatibilni med sabo.

 -------------------------
 daemon
 -------------------------
- Background process for system

- če se proces konča z "d" potem je Deamon npr. "sshd"

- Main deamon is "systemd"

ps aux //gledaš končnice "d"

-pstree //izpise vse procese

 -------------------------
 wc -l barry.txt > myoutput //zapiše v datoteko

 wc -l barry.txt >> myoutput //appenda v datoteko



>
    Save output to a file.
>>
    Append output to a file.
<
    Read input from a file.
2>
    Redirect error messages.
|
    Send the output from one program as input to another program.


Odstranjevanje vrstice v datoteki:
sed -i '' '/pattern/d' ./infile

Pomakneš proces v background:
sleep 10 &


echo $PATH
echo $HOME
echo $BASH  - izpiše podatke o interpreterju
echo $RANDOM - izbriše random cifrom

ifconfig eth0 up/down

------------------------
EXPORT 
//prenese variable v child process

export //vse kar je exportano
export -p //vse kar je exportano

export PIVO=/union
unset PIVO //pobrise

------------------------
arch -> arm64 //izpise arhitekturo procesorja

------------------------
ALIAS
alias burek=pwd
alias burek=cat neki.txt | grep blaz
burek

------------------------
REDIRECT:

0: stdin
1: stdout
2: stderr


stdout 1
stderr 2
če program vrne exit 1 pomeni, da piše na standarni izhod
anidejdi 2> file.txt //anidejdi ni ukaz zato dobimo izhod 2

echo "test" 1>&2 //redirect na stderr

ping google.com 1> /dev/null // vse kar je ok damo v /dev/null tako, da dobimo samo errorje v konzolo (ti nas trenutno zanimajo).

grep -r hello /sys/ &> /dev/null // stdout, stderr gresta oba v /dev/null

> //po defoultu piše na stdout (1)
1> //explicitno hočeš, da piše na 1
> je isto kot 1>
2> //piše na stderr (2)

./neki.sh 1> output.txt 2> error_log.txt // oba redirecta naenkrat, vse kar ok gre v output.txt, errorji pa v error_log.txt

Redirecting stdout and stderr to the Same File
./error.sh > capture.txt 2>&1 // stream 2 preusmeri na isti naslov kot stream1

------------------------

TAR: //tar = tape archive
//tar is just bundles files together (the result is called a tarball)
//tar file is NOT compressed like zip file is.

tar cvf mojTest.tar test.txt
(c-create, v-izpis v konzolo, file)

tar xvf mojTest.tar test.txt

tar -tvf file.tar //List the contents of a tar file
tar -ztvf file.tar.gz //List the contents of a tar.gz file

GZIP:
gzip file.txt

DIFF:
diff file1 file2

SHA-1:
sha1sum fileName.zip

SSH:
keys location: /Users/blazoblak/.ssh/

WHICH:
which ls
/bin/ls // kje se nahaja program

LN //add link hard or soft
ln -s //-s soft link
ln -s file-txt nameOfLink // add symbolic link

STAT
stat filena.txt //statistika o datoteki

FILE
file file.txt //info o file

FINGER
finger username //info o userju

FIND
find ~/Documents -iname index.html

-name //Case sensetive
-iname //case insensetive

MORE/LESS
more index.html //use space to move
less index.html

HEAD / TAIL
head index.html //izpiše začetni del
tail index.html //izpise zadnji del

head -n 10 //prvih 10 vrstic
tail -n 20 //zadnjih 20 vrstic

head -c 10 //prvih 10 znakov
tail -c 10 //zadnjih 10 znakov


OD / HEXDUMP
od file.txt // izpis v osmiškem sistemu
hexdump file.txt izpis v 16 sistemu

seq 0 9 | hexdump

SORT
sort 
SHUF
shuf

UNIQ //odstrani duplikate
uniq

NL //oštevičenje vrstic
nl file.txt
1.	neki
2.	neki
...


REV //obratni vrstni red

CUT / PASTE
cut -d ":" -f1
cut -c 1-4      //poreze string in prikaze od 1 do 4 znake.
cut -c 1,4,7    //pokaže 1, 4 in 7 znak v stingu
paste filename.txt


UNAME //izpiše ime kernel-a in ostale podatke
uname
uname -a

DF //za poizvedba o discu
df -ah // info o disku

NETSTAT
netstat //pokaže vse - ni koristno
netstat -an -ptcp | grep LISTEN
sudo lsof -i -P | grep LISTEN


NETCAT //Za TCP / UDP povezave
nc -u -l 8087 //Posluša UDP port.
-u //Posluša UDP (default je TCP)
-l //Listen



TOP //pokaže vse procese in koliko obremenjujejo procesor
top

MOUNT
mount // izpiše vse kar trenutno mountano

PS //izpis procesov
ps aux

SPLIT //razdeli datoteko
split file.txt

WC //štetje znakov, besed, vrstic
-c število bajtov
-m število znakov
-l število vrstic
-L dolžina najdaljše vrstice
-w stevilo besed


CMP //compare - primerjava med datotekami
cmp file1.txt file2.txt


SED //Stream editor
sed 's/t/T/g' file.txt s-substitude, g-global
sed -i 's/t/T/g' file.txt // i-spremeni originalno datoteko
sed 's/^t/T/g'
sed 's/unix/linux/2' geekfile.txt //spremni drugo besedo v vrstici
sed 's/unix/linux/3g' geekfile.txt //spremeni 3, 4, 5 besedo v vrstici
echo "Welcome To The Geek Stuff" | sed 's/\(\b[A-Z]\)/\(\1\)/g'
	(W)elcome (T)o (T)he (G)eek (S)tuff
sed '3 s/unix/linux/' geekfile.txt //spremeni v 3. vrstici

sed 's/unix/linux/p' geekfile.txt //Duplicating the replaced line with /p flag
sed '1,3 s/unix/linux/' geekfile.txt //Replacing string on a range of lines.

sed '5d' filename.txt //izbrise 5. vrstico
sed '$d' filename.txt //izbriše zadnjo vrstico
sed '3,6d' filename.txt //izbriše od 3-6 vrstice
sed '12,$d' filename.txt //izbriše od 12-zadnje vrstice

sed '/pattern/d' filename.txt
sed '/abc/d' filename.txt




PROCESI
ppid //parent process id

PIDOF
pidof ime_procesa //ne deluje na mac-u

PGREP


PS
ps
ps -A //-A izpis vseh procesov
ps -A | grep [f]irefox | awk '{print $1}'


TOP
top //izpiše vse procese, ki tečejo


JOBS
sleep 20 &

jobs //vsi posli

FG/BG
fg posel
bg posel

WAIT //čakanje lupine na posel
wait PID

Semafor
lockfile file.txt
rm -f file.txt


pkill [stikala] vzorec
killall [stikala] ime

trap [ukaz] signal //lovljenje signala

-------------------------------------------------------------------------------------------------------------
Regular expresions:
-------------------------------------------------------------------------------------------------------------
http://www.grymoire.com/Unix/Regular.html
https://regexr.com/ - dule
https://regexone.com/  - vaje
https://www.youtube.com/watch?v=Z66TeSTcP-Q - groups
https://en.wikipedia.org/wiki/Regular_expression - wiki

egrep <=> grep -E  (extended regx)
fgrep <=> grep -F


PRI grep daj regEx v narekovaje ("^a[1-0]*"), ČE NE NE DELUJE!!!!!

grep uporablja BRE (basic regular expressions)
egrep (grep -E) uporablja ERE (extended reg. expressions)
PCRE (Perl-compatible Regular Expressions)



grep ^[^a-z] vi_example   //vse velike črke in ostali znaki, ki niso male črke

grep '^1\{2\}3' - 2 "11" na začetku, nakar sledi 3

"\<[tT]he\>" - išče besedo the


regex:
.   en znak
\.  navadna pika (text)
^   začetke vrstice
$   konec vrstice
\<  začetek besede
\>  konec besede
\b  rob besede
\B  ne rob besede
\s  white space
\w  [A-Za-z0-9_] //besedilo
\W  [^A-Za-z0-9_] //ni besedilo
\d  [0-9] //digits
\D  [^0-9] //ne digits


Ponavljanje (IMA PRIORITETO PRED STIKOM)
a? - 0 ali črka a
ab*  a nato sledi 0 - ali več ponovitev črke b


Extended regex:
Ponavljanje
? 0 or 1
+ 1 or more
* 0 or more
{n}  n ponovitev
{n,} več ali enako n ponovitev
{n, m} med n do m ponovitev




Plus uporabe:
()?
()+
()*


Posix (dodali kasneje):
'a-zA-Z' <=> [:alpha:]

Groups
() - group0
(neki(test)) test je group1

$0 - group0
$1 - group1

(w+)\s\1  -> označi podvojene besede npr, test test hi hi
\1
\2


------------------------------------------------------------------------------------------------------------
------------------------------------ B A S H --------------------------------------------------------------
https://ryanstutorials.net/bash-scripting-tutorial
------------------------------------------------------------------------------------------------------------

#!/bin/bash    //Shebeng - kje se nahaja interpreter


argumenti programa:
$0 - Ime skripte
$1 - prvi param
$2
.
.
$9

ukaz env ti izpiše argumete, ki jih lahko uporabiš v skripti


variable=value  //Ni presledkov!!!

String:
aa="neki"

Razlika med " in '
echo "tmp $aa" -> "tmp neki"
echo 'tmp $aa' -> 'tmp $aa'



Command Substitution:
variable=$( command )
myvar=$( ls /etc | wc -l ) - shranimo izhod ukazov v spremenljivko


Ask the User for Input:
read var1

read -p 'Username: ' uservar -> Username: ryan
read -sp 'Password: ' passvar -> Password:



----------------
Let
let <arithmetic expression>

let a=5+4  -> PAZI NA PRESLEDKE (obratno kot let)
echo $a # 9

let "a = 5 + 4"
echo $a # 9

let a++
echo $a # 10

let "a = 4 * 5"
echo $a # 20

let "a = $1 + 30"
echo $a # 30 + first command line argument

-------
Expr
expr item1 operator item2

expr 5 + 4 -> PAZI NA PRESLEDKE
expr "5 + 4"
expr 5+4
expr 5 \* $1
expr 11 % 2
a=$( expr 10 - 3 )
echo $a # 7


---------------
Double Parentheses:
$(( expression ))

a=$(( 4 + 5 ))
echo $a # 9

a=$((3+5))
echo $a # 8

b=$(( a + 3 ))
echo $b # 11

b=$(( $a + 4 ))
echo $b # 12

(( b++ ))
echo $b # 13

(( b += 3 ))
echo $b # 16

a=$(( 4 * 5 ))
echo $a # 20


----------------
Length of a Variable
${#variable}


------------------
IF statement

if [ <some test> ]
then
<commands>
fi


Operator 	Description:
! EXPRESSION 	        The EXPRESSION is false.
-n STRING 	            The length of STRING is greater than zero.
-z STRING 	            The lengh of STRING is zero (ie it is empty).
STRING1 = STRING2 	    STRING1 is equal to STRING2
STRING1 != STRING2 	    STRING1 is not equal to STRING2
INTEGER1 -eq INTEGER2 	INTEGER1 is numerically equal to INTEGER2
INTEGER1 -gt INTEGER2 	INTEGER1 is numerically greater than INTEGER2
INTEGER1 -lt INTEGER2 	INTEGER1 is numerically less than INTEGER2
-d FILE 	            FILE exists and is a directory.
-e FILE 	            FILE exists.
-r FILE 	            FILE exists and the read permission is granted.
-w FILE 	            FILE exists and the write permission is granted.
-x FILE 	            FILE exists and the execute permission is granted.
-s FILE 	            FILE exists and it's size is greater than zero (ie. it is not empty).



1) = is slightly different to -eq. [ 001 = 1 ] will return false as = does a string comparison (ie. character for character the same) whereas -eq does a numerical comparison meaning [ 001 -eq 1 ] will return true.

2) When we refer to FILE above we are actually meaning a path. Remember that a path may be absolute or relative and may refer to a file or a directory.

3) Because [ ] is just a reference to the command test we may experiment and trouble shoot with test on the command line to make sure our understanding of its behaviour is correct.


1  - FALSE
0 - TRUE


IF-ELSE
if [ <some test> ]
then
	<commands>
else
	<other commands>
fi


ELIF:
if [ <some test> ]
then
	<commands>
elif [ <some test> ]
then
	<different commands>
else
	<other commands>
fi

-------------------------
Boolean Operations

and - &&
or - ||

if [ -r $1 ] && [ -s $1 ]
then
	echo This file is useful.
fi


if [ $USER == 'bob' ] || [ $USER == 'andy' ]
then
  ls -alh
else
  ls
fi

-------------------------
Case Statements

case <variable> in
<pattern 1>)
	<commands>
;;
<pattern 2>)
	<other commands>
;;
esac



-------------------------
Loops:

WHILE:

while [ <some test> ]
do
	<commands>
done


UNTIL:

until [ <some test> ]
do
	<commands>
done


FOR:

for var in <list>
do
  <commands>
done



names='Stan Kyle Cartman'
for name in $names
do
  echo $name
done


for value in {1..5}   |  for value in {10..0..2} -pomanjšuj po 2
do
  echo $value
done


SELECT:
select var in <list>
do
  <commands>
done

------------------------
Functions:

function_name () {
	<commands>
}


or

function function_name {
	<commands>
}


print_something () {
	echo Hello I am a function
}

print_something


argumenti:
print_something () {
	echo Hello $1
}
print_something Mars


return: //Ne vrača vrednosti, samo STATUS (0-OK, ...)
print_something () {
	echo Hello $1
	return 5
}

print_something Mars
print_something Jupiter
echo The previous function has a return value of $?


substitucija za vračanje vrednosti
lines_in_file () {
	cat $1 | wc -l
}
num_lines=$( lines_in_file $1 )
echo The file $1 has $num_lines lines in it.



Variable Scope:
local var_name=<var_value>


-------------------
Array

${#arr[@]} //Length

allThreads=(1 2 4 8) //ustvari array in doda

${arr[2]} //drugi element

${arr[@]} //access all elements

${!arr[@]} //access index

${#arr[@]} //array size

arr[0]=3 //jasno

arr+=(4) //append

str=$(ls) //save value as a string

arr=( $(ls) ) //save ls as an array

${arr[@]:s:n} //Retrieve n elements starting at index s

//Izpise elemente
for t in ${allThreads[@]}; do
  echo $t
done

//Izpise indexe
for index in ${!l[@]}; do
    echo $index
done



-------------------
command - če imaš funkcijo z istim imenom kot konzolna funkcija npr. ls

ls () {
	command ls -lh  //če ne daš komand pride do rekurzije kar ni ok oz. je pizdarija
}
ls





------------------------------------------------------------------------------------------------------------
------------------------------------ -- --------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
Free comands:

String replace
${parameter/pattern/string}
${parameter//pattern/string}



[ "$str1" = "$str2" ]
echo $?  //izpiše izhodni status prejšnjega ukaza



echo $#  //Izpiše koliko argumentov imamo



-----------------------------------------
PKCS
-----------------------------------------
PKI - Public key infrastructure
PKIX - Public-Key Infrastructure X.509
PKCS - Public-Key Cryptography Standards
CMS - Cryptographic Message Syntax

Encoding:
PEM (Privacy Enhanced Mail) base64 encoding with header and footer lines. 
DER (Distinguished Encoding Rules) is a binary encoding for X. 509 certificates and private keys. Mostly in Java


.key - usaly private key (PKCS#8), password protected or not

.csr, .req. p10 - Certificate Signing Request. PKCS#10, publicKey, CN, ...

.crt, .cer - certificate, usually an X509v3 - signature by the Certificate Authority

.p8, pkcs8 - not that important

.p12, .pfx - PKCS#12 defined key store, commonly password protected. 
certificates, private key(s) and their certificate chain. Usaly DER(binary) encoded.

.crl - Certificate Revocation List which is defined within the X.509v3 certificate specifications, and this is usually DER encoded


.jks - Java Key Store, store private keys with their certificate chains

-----------------------------------------
openssl
-----------------------------------------
openssl version -d

-lahko zakodiraš datoteke (npr. AES)

Generate Key Pair
openssl genrsa -des3 -out private.pem 2048

Extract Public Key
openssl rsa -in private.pem -outform PEM -pubout -out public.pem


crl - Certificate Revocation List:
- Seznam kamor pogleda browser, če je certificat veljaven.
- Browser preveri preko:
	-CA (or CRL issuer)
	-preko OCSP (online certificate status protocol)

-----------------------------------------
BREW
-----------------------------------------
brew install openssl

brew info openssl

brew reinstall autoconf

brew remove autoconf

brew update //finds all updates - ne prenese še nič na računalnik

brew upgrade //prenese vse zadnje verzije programov

brew search - pokaže vse kar ima

brew outdated - izpiše, če je kaj outdated

//formula
//cask - Firefox

brew home git //odpre spletno stran od gita

brew list
brew cask list (--version)  oz. brew list --cask (novi način)

brew cleanup //pobrise stare verzije

brew doctor //izpise, če je potrebno kaj popraviti

Location:
/user/local/opt...    //za intelove čipa
/opt/homebrew/opt/... // za M1 čipe


brew instal grep //na Macu že imaš grep (BSD), ta ukaz prenese grep (GNU) in ga uporabljaš kot ggrep (ima prefix g)

-----------------------------------------
pmset - power manager set
-----------------------------------------

sudo pmset repeat sleep MTWRFSU 00:45:00 //sleep
sudo pmset repeat sleep MTWRFSU 15:45:00

sudo pmset repeat restart MTWRFSU 03:00:00 //restart

pmset -g
pmset -g sched

sudo pmset repeat cancel //pobriše vse


-----------------------------------------
Python
-----------------------------------------
python3 -m http.server //Starts http server http://localhost:8000


-----------------------------------------
WGET
-----------------------------------------

-downloading webpages or files

wget https://file-examples.com/wp-content/uploads/2017/02/file-sample_100kB.doc


//Save file with new name
-O
wget -O word-file-test.doc https://file-examples.com/wp-content/uploads/2017/02/file-sample_100kB.doc

-----------------------------------------
CURL
-----------------------------------------
-lets you interact with the remote server. 
It can upload files as well as retrieve them


curl https://reqbin.com/echo

-H //add headers
curl https://reqbin.com/echo -H "Cache-Control: must-revalidate" -H "Pragma: no-cache" -H "..."

//Get only headers
curl -I https://reqbin.com/echo

//follow redirects
curl -L https://reqbin.com/echo

//send cookies
curl https://reqbin.com/echo -b "session=eJwlzj0wMQG7eO4Q"

//Get Json
curl https://reqbin.com/echo/get/json -H "Accept: application/json"


-----------------------------------------
NMAP
-----------------------------------------
-Detects network vulnarbilities

-----------------------------------------
Osint framawork
-----------------------------------------
https://osintframework.com/


-----------------------------------------
DOCKER
-----------------------------------------

-Virtual machines - simulirajo hardwere

Ubuntu/Windows/...
hypervisor (npr. vmwere)
hardwere

-Docker

Ubuntu / CentOS / Debian
Docker Engine
ubuntu (os just one)
hardwere


docker pull centos 

docker run -d -t --name burek centos

docker ps //izpiše vse conteinarje če tečejo

docker exec -it burek bash // connect to centos  //-bash- da se povežežš na bash od centosa
exit // da se vrneš na host OS (pri meni Mac)

docker stop burek //ustavi container
docker start burek //ponovno zažene container

hub.docker.com // conteinerji od dockerja


-----------------------------------------
CMake
-----------------------------------------

1) Create CMakeLists.txt
cmake_minimum_required(VERSION 3.10)

project(Burek)

add_executable(Burek main.c)

2) cmake -S . -B output

3) cd output
4) make

-----------------------------------------
pgk-config
-----------------------------------------

Return metainformation about installed libraries

pgk-config ffmpeg --libs


-----------------------------------------
AWK
-----------------------------------------

awk - original
nawk - new awk - better version
gawk - Gnu Awk

awk '{print $0}' //0 - vse
awk '{print $1}' //1 - prvi stolpec

awk -F ":" '{print $0" "$3" "$5}' //-F separator - default je space ' '

{print $NF} //zadnji column

{print $3 + $4} //add column 3 and 4

awk 'length($3) > 5' //izpise stolpce vecje od 5

awk '{ if($NF == "/bin/zsh") print $0}' /etc/shells  //if statement

awk 'BEGIN {for(i=0; i < 10; i++) print "result:", i, i*i;}' //for loop


BEGIN {awk-commands} //optional
/pattern/ {awk-commands}  //Body
END {awk-commands}   //optional


-f  //file
command.awk //save awk command to file
awk -f command.awk test.txt


-v //var, value
awk -v name=Jerry 'BEGIN{printf "Name = %s\n", name}'


awk '/a/ {print $0}' marks.txt //izpise vse, ki imajo a notri


-----------------------------------------
GCC - compile
-----------------------------------------

gcc -o name main.c

-Wall //Enable every warning

-Werror //Convert warnings into errors

-l //Link with a shared library
gcc main.c -o Hello -lpthread

-L //link the external libraries
gcc -L/home/user/LHB -o main.c Results -lLHB

compiling stages:
-E //preprocesor 

-S //get assembly code

-C //compiled code

-save-temps // == -E -S -C gets all 3 stages
gcc -save-temps main.c


-fPIC //position-independent code
gcc -c -Wall -Werror -fPIC main.c
gcc -shared -o libmain.so main.o


-V //verbose output of compilation
gcc -Wall -v main.c -o Result

//File
1) Save to file (Burek):
-Wall -Werror -save-temps

gcc main.c @Burek


STATIC Library:

ar rcs libneki.a add.o
r-replace, c-create, s-index


link:
gcc -o out main.o libneki.a

gcc -o out -L . main.o -lneki

-I //kje išče header fajle
-L //library path
-l npr. -lstuff  //name of library

gcc main.c -L libs -lstuff -I inc -o out
main.c
#include<stdio.h> //išče na standardnih mestih za library
#include "stuff.h" //išče header v trenutnem folderju + standarna mesta


SHARED Library




------------------------------------------------------------------------------------------------------------
------------------------------------ V I M --------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

vi ~/.vimrc   //File kjer imaš svoje nastavitve o vi editorju


syntax on
syntax off


set number
set nu

set nonumber
set nu!

G + line_nuber //skoči v določeno vrstico
dd // zbriše vrstico
G //gre v zadnjo vrstico

12 + G //skoči v 12 vrstico




Git global setup

git config --global user.name "blaz oblak"
git config --global user.email "blaz@digied.si"

Create a new repository

git clone git@gl.digied.si:blaz/test_blaz.git
cd test_blaz
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder

cd existing_folder
git init
git remote add origin git@gl.digied.si:blaz/test_blaz.git
git add .
git commit -m "Initial commit"
git push -u origin master

Existing Git repository

cd existing_repo
git remote rename origin old-origin
git remote add origin git@gl.digied.si:blaz/test_blaz.git
git push -u origin --all
git push -u origin --tags




