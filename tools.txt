----------------------------------
FFMPEG
----------------------------------
-https://ostechnix.com/20-ffmpeg-commands-beginners/

--------------------------------------------------------------------------------------------
ffmpeg [GLOBAL OPTIONS] {[input_options] -i input_url} ... {[output_options] output_url}
--------------------------------------------------------------------------------------------

-genpts //generate Presentation TimeStamp
-re //read input at native frame rate
-b  //bitrate
-r  //FPS - frames per second
-copy //stream copy
-map  //stream selection. If map not present ffmpeg use auto selection of stream. -map 0 uses all stream from file0.

-vn //skip video
-an //skip audio
-dn //skip data
-sn //skip subtitle
-stream_loop X //0- no loop, -1 - infinite loop

-i //input
-y //overide output files
-n //do not


-----------
tbn = the time base in AVStream that has come from the container
tbc = the time base in AVCodecContext for the codec used for a particular stream
tbr = tbr is guessed from the video stream and is the value users want to see when they look for the video frame rate
-----------


//File info
ffmpeg -i in.mp4

//Webm -> mp4
ffmpeg -fflags +genpts -i 1.webm -r 24 1.mp4

Reduce Bitrate:
ffmpeg -i input.mkv -c:a copy -c:v libx264 -b:v 1M output.mp4

Reduce Framerate:
ffmpeg -i input.mkv -c:a copy -c:v libx264 -r 24 output.mp4

Reduce Resolution:
ffmpeg -i input.mkv -c:a copy -c:v libx264 -s 848x480 output.mp4

Reduce Bitrate, Framerate, and Resolution:
ffmpeg -i input.mkv -c:a copy -c:v libx264 -s 848x480 output.mp4

Trim:
ffmpeg -i input.mkv -ss 00:00:10 -t 10 output.mkv

Crop:
ffmpeg -i input.mkv -filter:v "crop=1280:720:0:0" output.mkv

Watermark:
ffmpeg -i input.mkv -i watermark.png -filter_complex "overlay=50:50" output.mkv

Overlay Videos:
ffmpeg -i input.mkv -i input2.mkv -filter_complex "[0:v][1:v] overlay=25:25" output.webm

//Create gif
ffmpeg -ss 00:00:20 -i sample.mp4 -to 10 -r 10 -vf scale=200:-1 stuff.gif

//Speed up or Slow down the video
ffmpeg -i input.mp4 -filter:v "setpts=0.125*PTS" output.mp4

Desaturate  (black white)
ffmpeg -i input -vf hue=s=0 output

Grayscale
ffmpeg -i input -vf format=gray output


STREAMING:
udp:
ffmpeg -i INPUT -f mpegts udp://host:port

//Multicast
ffmpeg.exe -threads 2 -re -fflags +genpts -stream_loop -1 -i 2020-06-30_13-42-56_primary_camera.ts -map 0:0 -c copy -map 0:1 -c copy -f mpegts udp://239.2.3.1:112233

rtsp:
ffmpeg -i input -f rtsp -rtsp_transport tcp rtsp://localhost:8888/live.sdp
ffmpeg -re -stream_loop -1 -i file.ts -c copy -f rtsp rtsp://192.168.35.125:8554/mystream

Restream:
ffmpeg -i input -f format udp://hostname:port
ffmpeg -i input -f mpegts udp://hostname:port?pkt_size=188&buffer_size=65535
-Restream multicast:
ffmpeg.exe -i udp://239.2.3.1:12345 -map 0:0 -c copy -map 0:1 -c copy -f mpegts udp://192.168.35.100:11024?pkt_size=1316

Links:
https://github.com/aler9/rtsp-simple-server

https://ezgif.com/webp-to-mp4

https://handbrake.fr/docs/en/1.6.0/workflow/open-video-source.html

----------------------------------
FFPLAY
----------------------------------

-loop 3 //-1 infinite

-ss 10  // from where to start

-t duration

Keyboard:
-p //pause

-s //frame by frame

